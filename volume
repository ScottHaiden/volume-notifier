#!/usr/bin/env python3

import argparse
import contextlib
import fcntl
import json
import os
import pathlib
import re
import subprocess


_RUNPATH = pathlib.Path(f"/run/user/{os.getuid()}")
_DB_PATH = _RUNPATH / "volume.id"

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()

    parser.add_argument("-p", "--db-path", type=pathlib.Path, default=_DB_PATH)
    parser.add_argument("task", type=str)

    return parser.parse_args()


def get_pactl_status(status: str) -> str:
    cmd = ["pactl", f"get-sink-{status}", "@DEFAULT_SINK@"]
    return subprocess.check_output(cmd).decode()


def parse_volume(vol: str) -> str | None:
    match = re.match(r"Volume: (.*),\s+(.*)", vol)
    if match is None: return None
    return "\n".join(map("- {}".format, match.groups()))


@contextlib.contextmanager
def lock_db(path: pathlib.Path):
    try:
        fhandle = path.open("a+")
        fcntl.flock(fhandle.fileno(), fcntl.LOCK_EX)
        fhandle.seek(0)
        yield fhandle
    finally:
        fhandle.close()



def main(args: argparse.Namespace):
    cmds = {
            "up": ["pactl", "set-sink-volume", "@DEFAULT_SINK@", "+1000"],
            "down": ["pactl", "set-sink-volume", "@DEFAULT_SINK@", "-1000"],
            "mute": ["pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle"],
            "noop": ["true"],
    }

    with lock_db(args.db_path) as db:
        if cmd := cmds.get(args.task):
            subprocess.check_call(cmd)
        else:
            raise SystemExit(f"Invalid task {args.task}")

        mute = get_pactl_status("mute").strip()
        volume = get_pactl_status("volume")
        status = "\n".join([mute, parse_volume(volume)])

        try:
            notification_id = json.load(db)
        except json.decoder.JSONDecodeError:
            notification_id = None

        cmd = ["notify-send", "Volume", status, "-p"]
        if notification_id is not None:
            cmd += ["-r", str(notification_id)]

        new_id = int(subprocess.check_output(cmd).decode())

        if notification_id != new_id:
            db.truncate(0)
            json.dump(new_id, db)


if __name__ == "__main__":
    main(parse_args())
